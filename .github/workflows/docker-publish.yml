# .github/workflows/docker-publish.yml
name: Build and Push Docker Image to Docker Hub

# This workflow will run every time you push changes to the 'main' branch.
on:
  push:
    branches:
      - main # Workflow triggers on pushes to the main branch

# Define environment variables specific to this workflow.
# These variables make the workflow more readable and maintainable.
env:
  # Your Docker Hub repository name, including your username.
  # This will be 'ayodelefestung/ayulagio' as per your confirmation.
  DOCKER_FULL_IMAGE_NAME: ayodelefestung/ayulagio
  # The base version convention for your Docker image tags, as requested (v1).
  DOCKER_TAG_VERSION: v1

jobs:
  # Define a single job named 'build_and_push'.
  build_and_push:
    # Specifies the type of runner to use. 'ubuntu-latest' provides a clean Ubuntu environment.
    runs-on: ubuntu-latest

    # A list of steps to be executed in this job.
    steps:
    - name: Checkout repository
      # Uses the 'actions/checkout' action to fetch your repository's code.
      # This is the first step in almost all workflows.
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      # Sets up Docker Buildx, a Docker CLI plugin for extended build capabilities.
      # It enables building for multiple platforms and advanced features.
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      # Uses the 'docker/login-action' to authenticate with Docker Hub.
      # It uses the DOCKER_USERNAME and DOCKER_TOKEN secrets you configured in GitHub.
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Extract Docker metadata (tags, labels)
      # Uses the 'docker/metadata-action' to automatically generate Docker image tags and labels.
      # This ensures consistent and informative tagging.
      id: meta # Assigns an ID to this step so its outputs can be referenced later.
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_FULL_IMAGE_NAME }} # Uses the full image name defined in env.
        tags: |
          # Generates a tag like 'v1.YYYYMMDDHHmm' (e.g., v1.202506052215).
          # This provides a unique, timestamped tag for each build.
          type=raw,value=${{ env.DOCKER_TAG_VERSION }}.{{date 'YYYYMMDDHHmm'}}
          # Generates a simple 'v1' tag, which will always point to the latest 'v1' build.
          type=raw,value=${{ env.DOCKER_TAG_VERSION }}
          # You could also add 'type=sha' for a tag based on the commit SHA, or 'type=latest' etc.

    - name: Build and push Docker image
      # Uses the 'docker/build-push-action' to build your Docker image and push it to Docker Hub.
      uses: docker/build-push-action@v5
      with:
        context: . # Specifies that the Docker build context is the root of your repository.
        push: true # Instructs the action to push the built image to Docker Hub.
        tags: ${{ steps.meta.outputs.tags }} # Uses the tags generated by the 'metadata-action'.
        labels: ${{ steps.meta.outputs.labels }} # Uses the labels generated by the 'metadata-action'.
        # If your Dockerfile used build arguments (e.g., ARG DJANGO_ENV),
        # you would pass them here like this:
        # build-args: |
        #   DJANGO_DEBUG=${{ env.DJANGO_DEBUG_ENV }} # Example, ensure DJANGO_DEBUG_ENV is defined in 'env' or secrets.

    - name: Verify Docker Image on Docker Hub (Optional)
      # A simple step to print confirmation messages to the workflow logs.
      run: |
        echo "Docker image build and push successful!"
        echo "Repository: ${{ env.DOCKER_FULL_IMAGE_NAME }}"
        echo "Tags applied: ${{ steps.meta.outputs.tags }}"
